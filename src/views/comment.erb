<div class="comment" id="comment-<%= res[:post_id] %>">
  <% if board == "burg" then %>
    <% if res[:comment] == "burg" then %>
      <img class="burg" src="/static/burg.jpg" />
    <% else %>
      <img class="burg" src="/static/angryburg.jpg" />
    <% end %>
  <% else %>
    <% if res[:capcode] and res[:capcode].index("_hidden") != 0 %>
      <div class="redtext">##<%= res[:capcode] %>##</div>
    <% end %>
    <% if moderator and has_permission(session, "delete") then %>
      <i class="fa fa-trash offset-left" aria-hidden="true" onClick='deletePost(<%= res[:post_id] %>)'></i>
    <% end %>
    <% if moderator and has_permission(session, "view_ips") then %>
      <a style="display: inline-block; font-size: 50%;" href="/ip/<%= res[:ip] %>"><%= res[:ip] %></a>
    <% end %>
    <span class="post_number" style="display: none;">Post number #<span class="id_link a-like" onClick='reply_box_add(">>" + this.innerText)'><%= res[:post_id] %></span>, <span onClick='select_id(<%= JSON.dump res[:hash] %>)'>ID: </span><span class="hash" style="color: #<%= res[:hash] %>;" onClick="reply_box_add('>>' + this.innerText)"><%= res[:hash] %></span></span><br />
    |
    <%
      clean = ->(text) do
        text = Awoo.clean(text)
        apply_tag = ->(tag, span_contents, text, needs_arg) do
          opening_tag = "[#{tag}]"
          closing_tag = "[&#x2F;#{tag}]"
          if needs_arg
            opening_tag = "\\[#{tag}(,.*)?\\]"
            matched_opening = text.match(opening_tag)
          end
          # if the user forgot the closing tag, add it for them
          if (needs_arg ? text.match(opening_tag) : text.include?(opening_tag)) and not text.include?(closing_tag) then
            text = text + closing_tag
          end
          while
              (needs_arg ? matched_opening : text.include?(opening_tag)) and
              text.include?(closing_tag) and
              (needs_arg ? matched_opening.begin(0) : text.index(opening_tag)) < text.index(closing_tag) do
            if needs_arg then
              arg = matched_opening[1]
              arg = arg[1..arg.length-1]
            end
            t_span_contents = (needs_arg and arg) ? span_contents.sub('?', Awoo.clean(arg)) : span_contents
            to_sub = needs_arg ? matched_opening[0] : opening_tag
            text = text.sub(to_sub, "<span #{t_span_contents}>").sub(closing_tag, '</span>')
            # if the user forgot the closing tag, add it for them
            if (needs_arg ? text.match(opening_tag) : text.include?(opening_tag)) and not text.include?(closing_tag) then
              text = text + closing_tag
            end
          end
          return text
        end
        text = apply_tag.call("spoiler", "class='spoiler'", text, false)
        if res[:capcode] then
          text = apply_tag.call("i", "style='font-style: italic'", text, false)
          text = apply_tag.call("b", "style='font-weight: bold'", text, false)
          text = apply_tag.call("u", "style='text-decoration: underline'", text, false)
          text = apply_tag.call("s", "style='text-decoration: line-through'", text, false)
          text = apply_tag.call("c", "style='color: ?'", text, true)
          text = apply_tag.call("bg", "style='background-color: ?'", text, true)
          text = apply_tag.call("g", "style='?'", text, true)
          text = apply_tag.call("gg", "?", text, true)
        end
        text
      end
      html = ""
    %>
    <% res[:comment].split("\n").each do |line|
      line = line.chomp
        consecutive = 1
        j = 0
        # the extra -1 below ensures that extra >s at the end of a line do not get stripped off
        line.split(">", -1).each do |x|
          # If we haven't hit the first > yet, then display it normally (no red text)
          if j == 0
            html += clean.call(x)
          else
            # If we've hit the second > in a row, and it's not immediately followed by a third >, it's a link to a thread
            # either in the format >>1234 or >>/board/1234, where the first one must be in the current thread and the second
            # one must be an OP on that board
            if x.length > 0 and consecutive == 3
              x_split = x.split(" ")
              target = x_split[0]&.split("/")
              if not target
                ;
              elsif target.length == 1 then
                # it's in the format >>1234 or >>ab1e02
                orig_target = target[0]
                if orig_target.match(/^[0-9a-fA-F]*$/) then
                  target[0] = target[0].to_i(16).to_s(16) # sanitize so they don't inject javascript
                  target[0] = target[0].rjust(orig_target.length, "0")
                  html += "<a class=\"redtext referencer\" data-refers-to='#{ target[0] }' data-is='#{ res[:post_id] }' onMouseOver='hover(#{ JSON.dump target[0] }, #{ JSON.dump res[:post_id] }, #{ JSON.dump board })' onMouseOut='unhover()' onClick='select(#{ JSON.dump target[0] }, #{ JSON.dump res[:parent] }, #{ JSON.dump board })'>&gt;#{ Awoo.clean(orig_target) }</a> #{ clean.call(x_split[1..(x_split.length - 1)].join(" ")) }</a>"
                else
                  html += "<span class='redtext redtext-#{ consecutive }'>&gt;#{ clean.call(x) }</span>"
                end
              else
                # it's in the format >>/board/1234, so extract `board` and `1234` and make the link
                target_board = Awoo.clean(target[1]).gsub("\"", "")
                target_thread = target[2].to_i.to_s
                href = "/" + target_board.to_s + "/thread/" + target_thread.to_s
                html += "<a class='redtext' style='display: inline-block;' href='#{ href }'>&gt;#{ clean.call(x_split[0]) }</a> #{ clean.call(x_split[1..(x_split.length - 1)].join(" ")) }</a>"
              end
            # if the user was able to put [/spoiler] inside a link, things would be really fucked up
            elsif x.length > 0 and consecutive == 4 then
              # If we've hit the third > in a row, and it's not immediately followed by a fourth >, it's a link to another board
              # in the format >>/board/ or >>board
              x_split = x.split(" ")
              target_board_split = Awoo.clean(x_split[0]).split("/")
              # Assume >>/board/ at first
              target_board = target_board_split[1]
              if target_board_split.length == 1 then
                # if there were no slashes in the first word, assume >>board
                target_board = target_board_split[0]
              end
              # make the link
              html += "<a class='redtext' style='display: inline-block;' href='/#{ target_board }'>&gt;#{ clean.call(x_split[0]) }</a> #{ clean.call(x_split[1..(x_split.length - 1)].join(" ")) }</a>"
            else
              # it's some other form of red text, just display it as red text
              html += "<span class='redtext redtext-#{ consecutive }'>&gt;#{ clean.call(x) }</span>"
            end
          end
          # calculations for the number of consecutive > characters
          if x.length == 0 then
            consecutive += 1
          else
            consecutive = 2
          end
          # counter, largely unused now that I have the `consecutive` variable
          j += 1
        end
        html += "<br />";
    end %>
    <%= html %>
  <% end %>
</div>
<br />

